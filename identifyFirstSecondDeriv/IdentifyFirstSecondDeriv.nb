(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     56662,       1103]
NotebookOptionsPosition[     56226,       1084]
NotebookOutlinePosition[     56561,       1099]
CellTagsIndexPosition[     56518,       1096]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RandomSeed", "[", "101", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LaTeX", "[", "x_", "]"}], ":=", 
   RowBox[{"ToString", "[", 
    RowBox[{"TeXForm", "[", "x", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"code", "[", "i_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"kk", "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "3"}], ",", 
         RowBox[{"1", "/", "2"}], ",", "1", ",", "2", ",", "3"}], "}"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"denom", "[", "x_", "]"}], ":=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"kk", "+", 
          RowBox[{"x", "^", "2"}]}], ",", 
         RowBox[{
          RowBox[{"x", "^", "2"}], "+", 
          RowBox[{"x", "^", "3"}], "+", "kk"}], ",", 
         RowBox[{"kk", "+", 
          RowBox[{"x", "^", "3"}]}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"wildFunction", "[", "x_", "]"}], "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Sin", "[", "x", "]"}], ",", 
         RowBox[{"E", "^", 
          RowBox[{"Sin", "[", "x", "]"}]}], ",", 
         RowBox[{"E", "^", 
          RowBox[{"Cos", "[", "x", "]"}]}], ",", 
         RowBox[{"E", "^", 
          RowBox[{"ArcTan", "[", "x", "]"}]}], ",", 
         RowBox[{"2", "^", 
          RowBox[{"Sin", "[", "x", "]"}]}], ",", 
         RowBox[{"2", "^", 
          RowBox[{"Cos", "[", "x", "]"}]}], ",", 
         RowBox[{"2", "^", 
          RowBox[{"ArcTan", "[", "x", "]"}]}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"boundingFunction", "[", "x_", "]"}], ":=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"kk", "*", "x"}], "]"}], "^", "2"}], ",", 
         RowBox[{"x", "^", "2"}], ",", 
         RowBox[{
          RowBox[{"x", "^", "3"}], "*", 
          RowBox[{"Sin", "[", 
           RowBox[{"kk", "*", "x"}], "]"}]}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", "[", "x_", "]"}], "=", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"boundingFunction", "[", "x", "]"}], "*", 
          RowBox[{"wildFunction", "[", 
           RowBox[{"1", "/", 
            RowBox[{"Surd", "[", 
             RowBox[{"x", ",", "3"}], "]"}]}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"boundingFunction", "[", "x", "]"}], "*", 
          RowBox[{"wildFunction", "[", 
           RowBox[{"1", "/", 
            RowBox[{"Surd", "[", 
             RowBox[{"x", ",", "3"}], "]"}]}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"boundingFunction", "[", "x", "]"}], "/", 
          RowBox[{"denom", "[", "x", "]"}]}], ",", 
         RowBox[{
          RowBox[{"boundingFunction", "[", "x", "]"}], "*", 
          RowBox[{"wildFunction", "[", 
           RowBox[{"1", "/", 
            RowBox[{"Surd", "[", 
             RowBox[{"x", ",", "3"}], "]"}]}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"boundingFunction", "[", "x", "]"}], "*", 
          RowBox[{"Erf", "[", 
           RowBox[{"kk", "*", "x"}], "]"}]}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"switch", "=", 
      RowBox[{"Random", "[", 
       RowBox[{"Integer", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "6"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"F", "[", "x_", "]"}], ":=", 
      RowBox[{"NIntegrate", "[", 
       RowBox[{
        RowBox[{"f", "[", "t", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "0", ",", "x"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "1", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"F", "[", "x", "]"}], ",", 
        RowBox[{"f", "[", "x", "]"}], ",", 
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "2", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"F", "[", "x", "]"}], ",", 
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}], ",", 
        RowBox[{"f", "[", "x", "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "3", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "x", "]"}], ",", 
        RowBox[{"F", "[", "x", "]"}], ",", 
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "4", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}], ",", 
        RowBox[{"F", "[", "x", "]"}], ",", 
        RowBox[{"f", "[", "x", "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "5", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "x", "]"}], ",", 
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}], ",", 
        RowBox[{"F", "[", "x", "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fxns", "[", "6", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "'"}], "[", "x", "]"}], ",", 
        RowBox[{"f", "[", "x", "]"}], ",", 
        RowBox[{"F", "[", "x", "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "1", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "1"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "2", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "2"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "3", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "3"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "4", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "4"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "5", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "5"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verify", "[", "6", "]"}], "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"switch", "\[Equal]", "6"}], ",", "\"\<[correct]\>\"", ",", 
        "\"\<\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"graph", "=", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"fxns", "[", "1", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
        RowBox[{"Ticks", "\[Rule]", "False"}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Black"}], "}"}], " ", ",", 
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Black", ",", "Dashed"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Black", ",", "Dotted"}], "}"}]}], "}"}]}], 
        ",", 
        RowBox[{"PlotLegends", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"TraditionalForm", "[", "f", "]"}], ",", 
           RowBox[{"TraditionalForm", "[", "g", "]"}], ",", 
           RowBox[{"TraditionalForm", "[", "h", "]"}]}], "}"}]}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"graph", ",", "\[IndentingNewLine]", 
       RowBox[{"StringJoin", "[", 
        RowBox[{
        "\"\<\\\\documentclass{ximera}\n\\\\input{../preamble.tex}\n\
\\\\author{Bart Snapp}\n\\\\license{Creative Commons 3.0 By-NC}\n\
\\\\begin{document}\n\\\\begin{exercise}\n\\\\outcome{Identify the \
relationships between the function and its first and second derivatives.}\n\\\
\\tag{derivative}\nHere we see a plot of $f$, $g$, and $h$. \n\
\\\\begin{image}\n\\\\includegraphics[width=.5\\\\textwidth]{graphFandG\>\"", 
         ",", 
         RowBox[{"LaTeX", "[", "i", "]"}], ",", 
         "\"\<.png}\n\\\\end{image}\nWhich of the following is correct?\n\
\\\\begin{multipleChoice}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "1", "]"}], ",", 
         "\"\<{$f'(x) = g(x)$ and $f''(x) = h(x)$}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "2", "]"}], ",", 
         "\"\<{$f'(x) = h(x)$ and $f''(x) = g(x)$}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "3", "]"}], ",", 
         "\"\<{$g'(x) = f(x)$ and $g''(x) = h(x)$}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "4", "]"}], ",", 
         "\"\<{$g'(x) = h(x)$ and $g''(x) = f(x)$}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "5", "]"}], ",", 
         "\"\<{$h'(x) = f(x)$ and $h''(x) = g(x)$}\n\\\\choice\>\"", ",", 
         RowBox[{"verify", "[", "6", "]"}], ",", 
         "\"\<{$h'(x) = g(x)$ and $h''(x) = f(x)$} \n\\\\end{multipleChoice}\n\
\\\\end{exercise}\n\\\\end{document}\>\""}], "]"}]}], "}"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.652345238333228*^9, 3.6523452457168083`*^9}, {
   3.6523452809726467`*^9, 3.6523453338256273`*^9}, {3.652345424449148*^9, 
   3.652345483029799*^9}, 3.6523455642218733`*^9, {3.652345676515373*^9, 
   3.652345816811225*^9}, {3.652345867804785*^9, 3.652345871018894*^9}, {
   3.652345901780657*^9, 3.652345902445451*^9}, {3.652345945273902*^9, 
   3.652346030733322*^9}, 3.652346084971765*^9, {3.652346141236082*^9, 
   3.652346290181327*^9}, {3.652346335398164*^9, 3.652346340486264*^9}, {
   3.6523463861261663`*^9, 3.652346387465006*^9}, {3.652346423521185*^9, 
   3.652346491770639*^9}, {3.652346528368967*^9, 3.6523466902598963`*^9}, {
   3.652346880977273*^9, 3.652347051951643*^9}, {3.6523472456475058`*^9, 
   3.652347309421502*^9}, {3.6523473618277197`*^9, 3.652347461287818*^9}, {
   3.652347525846182*^9, 3.6523475425777607`*^9}, {3.652347634257369*^9, 
   3.6523476496133413`*^9}, 3.652347700920463*^9, {3.6523480209596653`*^9, 
   3.652348025147747*^9}, {3.652348062428413*^9, 3.652348064476071*^9}, {
   3.6523480988686113`*^9, 3.652348125864584*^9}, {3.652348178496326*^9, 
   3.6523484535910807`*^9}, {3.652348492389017*^9, 3.6523485160245447`*^9}, {
   3.652348577270892*^9, 3.652348690152155*^9}, {3.652348744272311*^9, 
   3.652348827488941*^9}, {3.6523488725556726`*^9, 3.6523489410349207`*^9}, {
   3.652349028166092*^9, 3.652349041463211*^9}, {3.652349074281086*^9, 
   3.652349074401146*^9}, {3.652349142105356*^9, 3.652349175420692*^9}, 
   3.6523493871992817`*^9, {3.652349566085923*^9, 3.6523495890370398`*^9}, {
   3.652350272056209*^9, 3.65235027214538*^9}, {3.6523520497101297`*^9, 
   3.652352055446659*^9}, {3.652357258336948*^9, 3.652357444162215*^9}, {
   3.65235758122771*^9, 3.652357653208231*^9}, 3.652357699080937*^9, {
   3.652357730585421*^9, 3.652357811826277*^9}, {3.652357895570675*^9, 
   3.652357916987164*^9}, {3.6523584378852587`*^9, 3.652358450148858*^9}, {
   3.652358504839335*^9, 3.652358586359335*^9}, {3.652358618776613*^9, 
   3.652358677375087*^9}, {3.652358711745422*^9, 3.652358810731271*^9}, {
   3.652358907976768*^9, 3.6523589115652733`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"code", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.652357451560953*^9, 3.652357452499712*^9}, {
  3.652357820610675*^9, 3.652357821252556*^9}, {3.652357963594756*^9, 
  3.652357968268875*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{GraphicsBox[{{}, {}, {
        GrayLevel[0], 
        Thickness[Large], 
        LineBox[CompressedData["
1:eJwVl2c8FgwbxRESQiijRxQiJDOF7kshKTxEhJaRRElWmSUyIiPZyt57hriv
286IjIzs7FFGVub7vJ/Ol3O+nd///M5x4yfX71OQkZG5kJOR/V9dp9SX9/ZY
SCmyZIlH2PZw0vnIav82C6mD7lTPGsseajANr3/6y0KK27n3rZNpD3nOW+88
+cNCsqa2Y/Sk3cPqN+9oRiZZSP47nTmVO7tII9pzjPSVhSSgUPv7/dguvre7
d+1lNAtpE1dq2rJ2MZPcNolMhoWktEwuc096F89pZ1BHSrKQfpkRRtnFd7E+
adRcXIyFVKEtnPhVZBdHVDRPG59iIdU7BjwW5tvFIwGnS2qOspBStcw4Spl3
8RXndIMXGQvpbaMl8fDCDt6UvD1H38RM6gqkMfqZtINU91UkOG4zk4a4Qr80
U+5gxx1xvTl9ZtIP4cz743vb+PHmUZdKXWZSWYVk6t/NbTyrtlBnpMlM2k8Z
yMG5tI1mkuH6GYr/5a/4NUoMbuMX8qmXckLMJIrTBa01Rdvo/9Gr7fb6IdK0
W0+cudE2svTWPUoIPkSKv+vCNJm3hddrokxONTGRbrC177hLbKLzwoVHQWOM
JHI7c3cp4w0sfRZlkfsvA2l/woy8h+8aary7wbMbSU9iWBgo4DVfQZUPlRpX
5mlJIjc1TYNllzGlwbHb1vAASUy6yDv+1CLe8Xx/uC1tP+kcU3bVk8E5dLu3
L4eOhZp0gTIzqKV1CslOc6Pia0oSdcSd7+vk4/jDL9I78zsFyYWiN4j71Aj+
Q2uevnKJnFQ18XIi/UsfWkoLUfX/s4dJ0v4OZu6daENVlurAuIdnPtN997Ho
RKfvKleZKfaQSbTJtEy7E9/Y3w9UndpFknIav/LJTswojuMozd/Fgw7Cb/a3
dOCMNJto6OVdvFdUkSLL2YEPzlLq/Wu9g9Rx5Desqr6hicxQWk3NFnbsZj49
/KwFzdJkdC9/2sKFjaHHEtotaMERvK8xYwv9KI4feHimBa23FO+0Bm9hAh47
wTvdjC6YztJ3dwtrNWP3mgya8b2KvdvvrU38xvru4qxSE9br0etwSG1izR3a
BxYiX1DoueyeVdIGavFIPdG/UoukQQ2hsbANXBcS0jUSrEVdRZMber4byCi3
LuFNU4uvGPwzwWoDycsySCKNNdiXNKjHdG4DM8TbGoeu1aBP+8u8/OZ1nNlQ
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
+0Lh1AqzGm+3hPzoFAaCtnRlffcr/A/ImUr2
         "]]}, {
        GrayLevel[0], 
        Thickness[Large], 
        Dashing[{Small, Small}], 
        LineBox[CompressedData["
1:eJwt2ndYTv/7APDms5pKW5pGKKGBxv0mSeqjHUoiFQ2lJJEVISHS0BANaai0
h9F5N2lPiZTG8yRllMbzoPE9v+v6/fM81+uPc537fr/v+z7vc11HycXX2o2H
i4trB/nzf/8Xv/73e2lJHJesqfbqrm2D0WDJ2b55cVwNVJ5XrDbYJ/qFXfZH
HLsrmova8raD4rZTC77T4vjh5fr2vartUB3+gDY4Ko6f+e544eTeDjSNDytx
izge6625LTLRDtEBR8yuJIrjHGOpygNzHfCc+/RTLl1xTAQwf6iKdQO/m8lm
GScx/GF5c1Bhei+I99Z5p0Yuw6JflgSv1n0G65qEY2qNopgS97B8+45BUO1m
DrytF8XRWps/MfcMwhxTw8G9RhQXNwdXhFsOQjylxjLttSiefPQyocF5EAZN
JwzkX4jirR2zZuKXBuFku570smhRvN2/M7qjYhDC+j83c5xEMVNDpb1LfQiC
fxl43x8RwX8E2VZNlGF4dFR3DPWL4Dltul6L4DC87tJ0neoRwdfK9lo0ig3D
YpnKIetGEdwdqz1esnIYrl6hmy8vIH3P+oq1zjCEL3u/Pu6SCA5tvPgjyXUY
ErZ4TzyREcHhUuGBrm+G4VW623FLcRE8JHUzp7Z6GD5LOY9wCYlgbavqBIV3
w7By3qrvKJcIZuw8+6CucxhSa3WbVL4K42tXt0Z2fB2GLDve5xnFwjik8cr4
qOgIlJ9N8HxhIYzP87VVTB4eAWVXv/TePcL4AeX4PL/rCNy13DPIvVMYSw06
Ry/3GAEXtTk7Wy1hHDoXUyJ/egQE+qx2/JEWxiYrFO2/3BiBw4Z0aaNhIWy6
nOfbitwR4OUPqusJEMKvmyW2eMyMgM/UPi4uHyG8td3RMpUzAr39q/TUjgvh
bQUU++75Ecgp7coPPiiEU10shVX4mWB/YuMjRUMhLPmf6YCnBBMym0b9PalC
+ISZt2eKFhP2PbBTXIwXxHcGyhtiTzLh/GYRU5MoQazS1cTfe4oJzzrf+d2/
I4gvHcRSYgFMWBTTr1G+LIiLPRyLT51nQm6UsruJqyCuWeh/8OEGEwRjfj2/
ryGIyy9HM/Y+ZsJW7azuj2sEcWHYjjSpFCa4vndZUFYSxFkXvSb705jwWqJn
X4m4IFa1e5hsm8UEr9jXUx85AriGo6w6XsSExoe3dFVqBDC+t29t8VsmzOka
HfF+LYBD88w2CjYyQbl3PqykRAC/UHjZeqiZjF/61CeTTAFMUUhv/9rOBLV4
+4vedwXw0aK/JU8/MsF2m+izkhsCmBmXZlfVx4QrHxtaFy8LYB9PIqSnnwm9
MgaKkf4C+J9Y+bnxISaEJajUlOwXwGK0iuryb0wo3t4/sWgpgCtKBp7ETzBh
8FPs8j17BfCn4feL/j/IfOUY7p/0BXABt6WByBQTxhInaUtKAvhYgGniDzYT
TJLe7NvznYH/ajGYiI8Fk3c/z/ONMvDOrW4HI/lZkHDpX3bVFwb21xnc3kdh
wXfnbVS9LgZun7YDRzoLHiiXEOovGfjwCbqeoDAL9MW7T44XMXAhW2RxjQgL
WLzTchm5DCwxNbzGQJQFW1maQYopDCzzMyrXRowFAxk5muJhDCx0PsZvkyQL
wuKaBtpCGHjppJ2jtBQLNt0av3MnmIH9TidkcEiHeq79xu/LwIz6L27pMizQ
cDR5WH2CgWWTuD74ybLgg5m78WUXBu6P/5qpK8eCdepPUzh2DPzd8uzJFytY
0C1fY1FiwcD3trg4H5VnwUXh4QU/UwZm3nmYL7iSBe2/FBwm9Bl4hVa0r4UC
C84PGtIydRi47j/i8yhplQ6nUldNBv56Zj7jrCILAgsTxQZUGHhba+r+60os
UEx7iRPkGdjML1KPR5kFDVEfffZLMXARLelCEGn/UM6K5csY+GXnA9kx0ivO
SDW1M8h4d+6SsFJhQb2bzrm7fAzM4r7pXUTa195uzd5FOu7/oaUoosoCaZOA
9xQOHa+R3aDpSrpaN+pazRQdn2zb96iQtPfawk1XJug46/Y117+kJWQ6vuiz
6FiJpyRMbxULKumTd/8M0LGDXCctkPSJv8L6pb10LDHbwswiLTahPu7fSccG
w09WfCD9qs88bmMzHfd5GuUvkHZt9tr9vY6O+czLn8ivZoHwm/CZTIKO353l
mdAhXZ6blepWQceiEusemJI++vidpXIRHcdc1ouxI82493VxIIeOi0xMZhxI
F1+m5CY+o2ObzS4vDpI+fGqV44FkOm7Yml5vRZp6dBddIoGOX4SpbzcinW91
rKwjio7Lrq1gaJB22HnVLeIuHd8jHuqIkebbkiJudpOOn/E3EL/IeHNVcBU1
hI5pNgPp9aTtl3/xrT1Px6q99G+xpLn4F+VDAuj4ESfk1hHS2bMrmg186FjE
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
mLy/CZ/kd9KBG3v5VNxoSKXpjpOqEQc0ulxTT3vR0KhV0i470qOBU1DrR0MH
TbWaLpF+LHupf3kQDd27ZzuVTNqukhHsdomGPvjzl70iLejyULo0lIYiCqxX
tJGu5VctpdymIfHz5kp9pC9k5dvsj6ShFE9q/RfSWv8ZTGU8pCGNyEeMftLf
JxsiOEk0ZO6l9quT9NNo+w2mT2noL6vtdBXpQ1tHGuKzaeiaU2lcJunln32P
j+fTkGUS9XAY6ebL83x6ZTRU/OV3zRHSoSq3Um+/oaG3Lc8bN5HWfyuBPtfQ
kOplT/9/ZP7Tnqn9GxppqPKc16s3pLOFNwZfbCfjK/iVHkTapfCVdGsPDZWE
6W/eQFrWfk/pyn4aCm9NPNJLrn/nn24b3xEaomLHTRdJhycdnSK+0dBWattT
WdI7d/yMEJ2koT8vzV/lk/tZGEZtLJinIdnhj5315P57bog+zsNLR++Sc7t3
k1ZuV+S3odMRl8vyYIKsn0ip7WhGgo6clGzLEsj62vOqvn/XCjrSq1u+b4Gs
Py5nm+AYZTpyKdW9fYD0qWfepTob6ei649O/nO1kvbTJxQjr0JHAwntdDdL/
/Wk8PapPR35arPcOZH2vM1fbFLuXjhJ7QnUTyPqPO9Mr4mNFR+ysuPkcsj+o
T27+ND5ARzIj91eVkf3DnGI9n3Wjo2K5oGcFZL9Zy8WEt3jTUZ6wHFcq2Y9V
u3Z5pJ8m4/+PUXVrE1kvD1NX24XQkZ1u0AXYyIH9Bs4pxY/oSMozYsZoHQfq
3YWv3Emjo+hpt7Rf5DzQuv/msGs2HblLX6h6sIYDoiNyK5aX05GCZLsFQc6T
xrDe2NNddJR/wvF9wUoOGHZb3dnMYKAbrf3xC6Ic8lzL5cVYxkDcvmUtiuR8
k1uTbzosxUALZluv6wmR/XxOmPpgFQOZBsld30/Ox0KFppApxECPTq2ZVuPm
wCqvXWfzzzLQsdnuqW2/2BAdPW0XdomB9tiKrez5Ts7nylStI9cZ6NYP+zGP
cTYMiHL/FolioMmaQ4eDWGyIK33j7ZvHQKsaA/g39bFBkEfXRYPFQJpn+v+J
1bGh4iyvzegEA1nZDMTrVrPB/Ueb0ePfDHSIErTTlmAD7j2xSphLAHH/+vDq
TAUbTr9IGPshK4B+31e9fTCXDZ8OLfrkWgqg4F7bO8+i2HCzs9HZbb8AKlU5
88n8Phu09jy0lD8sgOqOKu+fuMOGiC2am+96CSDzlE8s0Rvk85PhMut9QwA1
nPuWtHiWDZlldcEbXgugLMVfhe4ObLBTf+DNrBZAXu/WS0fak/mmHXZ61CCA
LpRqvi+yZsOhCLah4AcBhHTijg7vZYOImxrP9ykB5FSrIMbcTj4fxe6GPV8j
iMpsJm0vyLDB+KRtzLoo0pqfr0p0zEHAg1dcvvGCSKlPriu1eQ6elil7Fz0R
RDkXw1vV3s0BD8/UTv0cQXS44meHKjEHOPbu5H91gui3ctCBtpw52I7rzfzY
gugkb3U/58YcaIhv4yl3FEI2U9pWhTpzIF0h72usKoxGD1PLfEJnYfFYhtyy
9cJovUmd2eLFWWAKb3r3eZMwGvt48PDNs7OQ77pLKQCE0aMxf5EbnrNgIurV
leogjPgyLVR0yPNY4PFyXa5IYVR+xnOjm+wsvJew4Xq1IIxAOTBTMXsGHviH
RWp+EEEBze+V1crJ8+gNC/WkUlE0map95kTlFKxzDLV7enEZqiqgy+Rr/YKe
UXpqlJ0YqhaqvGVvOg6tLqwdYgriKNF/6+anj1kwxJfBiVEWR30Bzn/GbrFg
5tmJFzKrxdHm9GVDG8+wQGZiYoWSujiSfHzAotaMBa6nf7M36omjpMw6G/of
Jvy9tpT7335xNJESuX+ZLRNWp8vI3ronjm6bLU+/JjgC20z62gWjxFHyZtqC
GmcYzL89unk/Vhx9Eh5y6B4ZBj91xdmHSeLIMXqtq/arYXhdsrr92XNx1GaY
ZLHOcxis67fcqH0rjvD0qwff3w2B24lZ/T1N4qjsd9buT8VDEMQom25qFUfC
cPpnc/IQJO3bfrTrvTjyFI+wrQoagrEepD88Io48eMslx9YOwd8gnmm3r+JI
a8GXf2n5EAjJ1WZ9GxdHAcFXneS4h2Czs4nU1JQ4CjyrGur6cRCMuemtAbPi
6NDFL76RdYNwIK0xlMMRRzt4zJdqCgbB0/iO3oV5ceR0YgbNJw3C/3//g8pO
HTbaHj4I/wNQYmKD
         "]]}, {
        GrayLevel[0], 
        Thickness[Large], 
        Dashing[{0, Small}], 
        LineBox[CompressedData["
1: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
         "]]}}, 
      AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> 
      True, AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, Method -> {}, 
      PlotRange -> {{-5, 5}, {-1.9431368224356134`, 2.9420058055421645`}}, 
      PlotRangeClipping -> True, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02]}, Ticks -> False],TemplateBox[{
       TagBox[
        FormBox["f", TraditionalForm], TraditionalForm, Editable -> True], 
       TagBox[
        FormBox["g", TraditionalForm], TraditionalForm, Editable -> True], 
       TagBox[
        FormBox["h", TraditionalForm], TraditionalForm, Editable -> True]}, 
      "LineLegend", DisplayFunction -> (StyleBox[
        StyleBox[
         PaneBox[
          TagBox[
           GridBox[{{
              TagBox[
               GridBox[{{
                  GraphicsBox[{{
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0]], {}}}, AspectRatio -> Full, 
                   ImageSize -> {20, 10}, PlotRangePadding -> None, 
                   ImagePadding -> 1, 
                   BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                  GraphicsBox[{{
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0], 
                    Dashing[{Small, Small}]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0], 
                    Dashing[{Small, Small}]], {}}}, AspectRatio -> Full, 
                   ImageSize -> {20, 10}, PlotRangePadding -> None, 
                   ImagePadding -> 1, 
                   BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                  GraphicsBox[{{
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0], 
                    Dashing[{0, Small}]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[{
                    Opacity[0.3], 
                    GrayLevel[0]}], 
                    Thickness[Large], 
                    GrayLevel[0], 
                    Dashing[{0, Small}]], {}}}, AspectRatio -> Full, 
                   ImageSize -> {20, 10}, PlotRangePadding -> None, 
                   ImagePadding -> 1, 
                   BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                GridBoxAlignment -> {
                 "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                AutoDelete -> False, 
                GridBoxDividers -> {
                 "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}],
                "Grid"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
           "Grid"], Alignment -> Left, AppearanceElements -> None, 
          ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"],
          LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Times"}, 
        Background -> Automatic, StripOnInput -> False]& ), Editable -> True, 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "Large", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "0", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "Large", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "0", "]"}], ",", 
                   RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Thickness", "[", "Large", "]"}], ",", 
                   RowBox[{"GrayLevel", "[", "0", "]"}], ",", 
                   RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "Small"}], "}"}], "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& )]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], 
   ",", "\<\"\\\\documentclass{ximera}\\n\\\\input{../preamble.tex}\\n\\\\\
author{Bart Snapp}\\n\\\\license{Creative Commons 3.0 \
By-NC}\\n\\\\begin{document}\\n\\\\begin{exercise}\\n\\\\outcome{Identify the \
relationships between the function and its first and second \
derivatives.}\\n\\\\tag{derivative}\\nHere we see a plot of $f$ and $g$. \
\\n\\\\begin{image}\\n\\\\includegraphics[width=.5\\\\textwidth]{graphFandG6.\
png}\\n\\\\end{image}\\nWhich of the following is \
correct?\\n\\\\begin{multipleChoice}\\n\\\\choice{$f'(x) = g(x)$ and $f''(x) \
= h(x)$}\\n\\\\choice[correct]{$f'(x) = h(x)$ and $f''(x) = \
g(x)$}\\n\\\\choice{$g'(x) = f(x)$ and $g''(x) = h(x)$}\\n\\\\choice{$g'(x) = \
h(x)$ and $g''(x) = f(x)$}\\n\\\\choice{$h'(x) = f(x)$ and $h''(x) = \
g(x)$}\\n\\\\choice{$h'(x) = g(x)$ and $h''(x) = f(x)$} \
\\n\\\\end{multipleChoice}\\n\\\\end{exercise}\\n\\\\end{document}\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6523576621690197`*^9, {3.652357739461952*^9, 3.6523577939413548`*^9}, 
   3.652357831126416*^9, {3.6523579693993196`*^9, 3.6523579785359287`*^9}, 
   3.652358851961293*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.652349246299995*^9, 3.6523492470286837`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"precode", "=", 
       RowBox[{"code", "[", "i", "]"}]}], ";", "\t", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{"\"\<plotOfFxnAndDeriv\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.tex\>\""}], ",", 
        RowBox[{"precode", "[", 
         RowBox[{"[", "2", "]"}], "]"}], ",", "\"\<Text\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{"\"\<graphFandG\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.png\>\""}], ",", 
        RowBox[{"precode", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<PNG\>\"", ",", 
        RowBox[{"ImageResolution", "\[Rule]", "200"}]}], "]"}]}], "}"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "12"}], "}"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.652347837567121*^9, 3.652347948885171*^9}, {
  3.652349219899641*^9, 3.652349221250575*^9}, {3.652349311898711*^9, 
  3.6523493137226562`*^9}, {3.6523497700549583`*^9, 3.652349777286221*^9}, {
  3.652349824067274*^9, 3.652349824463776*^9}}]
},
WindowSize->{1366, 708},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Linux x86 (64-bit) (February 7, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 12011, 283, 1133, "Input"],
Cell[CellGroupData[{
Cell[12593, 307, 221, 4, 32, "Input"],
Cell[12817, 313, 42063, 735, 634, "Output"]
}, Open  ]],
Cell[54895, 1051, 94, 1, 32, "Input"],
Cell[54992, 1054, 1230, 28, 105, "Input"]
}
]
*)

(* End of internal cache information *)
